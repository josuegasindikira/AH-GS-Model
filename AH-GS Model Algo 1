 #  I'm working to improve this code to be handle to handle all modifications without problem.
student_institution_matching <- function(stud_prefs, inst_major_prefs, quotas, student_majors, student_ranks) {
  n_students <- length(stud_prefs)
  n_insts <- length(quotas)
  
  # Initialize assignment: -1 means unassigned
  assigned <- rep(-1, n_students)
  
  # Track which students are assigned to each institution
  assigned_to_inst <- vector("list", n_insts)
  for (i in 1:n_insts) {
    assigned_to_inst[[i]] <- integer(0)
  }
  
  # Keep track of which choice each student is applying to
  next_choice <- rep(1, n_students)
  
  free_students <- which(assigned == -1)
  
  while(length(free_students) > 0) {
    for (s in free_students) {
      if (next_choice[s] > length(stud_prefs[[s]])) next
      
      inst <- stud_prefs[[s]][next_choice[s]]
      
      if (length(assigned_to_inst[[inst]]) < quotas[inst]) {
        # Assign student directly
        assigned[s] <- inst
        assigned_to_inst[[inst]] <- c(assigned_to_inst[[inst]], s)
      } else {
        # Institution is full, check for replacement
        current_students <- assigned_to_inst[[inst]]
        inst_pref <- inst_major_prefs[[inst]]
        
        # Compute major preference rank (lower number = better)
        student_priority <- sapply(current_students, function(x) {
          pos <- match(student_majors[x], inst_pref)
          ifelse(is.na(pos), length(inst_pref) + 1, pos)
        })
        
        new_student_priority <- match(student_majors[s], inst_pref)
        if (is.na(new_student_priority)) {
          new_student_priority <- length(inst_pref) + 1
        }
        
        # Find the worst student based on major preference
        worst_priority <- max(student_priority)
        candidates_worst <- current_students[student_priority == worst_priority]
        
        # If tie, choose the worst-ranked student based on global student rank
        if (length(candidates_worst) > 1) {
          # Get the ranks of candidates and find the one with highest (worst) rank
          worst_student <- candidates_worst[which.max(student_ranks[candidates_worst])]
        } else {
          worst_student <- candidates_worst
        }
        
        # Get the priority of the worst student
        worst_student_priority <- student_priority[which(current_students == worst_student)]
        
        # Replace only if new student has better major preference OR
        # same major preference but better rank
        if (new_student_priority < worst_student_priority) {
          # New student has strictly better major preference
          assigned[worst_student] <- -1
          assigned[s] <- inst
          assigned_to_inst[[inst]][which(current_students == worst_student)] <- s
        } else if (new_student_priority == worst_student_priority) {
          # Same major preference, check student rank
          if (student_ranks[s] < student_ranks[worst_student]) {
            # New student has better rank
            assigned[worst_student] <- -1
            assigned[s] <- inst
            assigned_to_inst[[inst]][which(current_students == worst_student)] <- s
          }
        }
      }
      
      # Move to next choice if still unassigned
      if (assigned[s] == -1) next_choice[s] <- next_choice[s] + 1
    }
    
    free_students <- which(assigned == -1)
  }
  
  # Return a list by institution
  result <- vector("list", n_insts)
  for (i in 1:n_insts) {
    result[[i]] <- assigned_to_inst[[i]]
  }
  
  return(result)
}

# ----------------------------
# Example usage
stud_prefs <- list(
  c(2,1,3),
  c(2,1,3),
  c(2,1,3),
  c(2,1,3)
)
student_majors <- c("Econ","Law","Econ","Law")
inst_major_prefs <- list(
  c("Econ", "Law"),
  c("Econ", "Law"),
  c("Econ", "Law")
)
quotas <- c(2,1,1)
student_ranks <- c(1,2,3,4)

result <- student_institution_matching(stud_prefs, inst_major_prefs, quotas, student_majors, student_ranks)
print(result)
r
